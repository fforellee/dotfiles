#+TITLE: My config file

This is my config file for emacs, here I define many packages that use
using a declarative system with the aid of straight.el.

* Straight.el 
  #+BEGIN_SRC emacs-lisp
					    ;Define straight.el 
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))


					    ;(set-frame-font "-CYRE-Inconsolata Nerd Font-bold-normal-normal-*-*-*-*-*-*-0-iso10646-1" nil t)
    (straight-use-package 'use-package)
  #+END_SRC

* Preferences
  #+BEGIN_SRC emacs-lisp
    (recentf-mode 1)
    (setq recentf-max-menu-items 25)
    (global-set-key "\C-x\ \C-r" 'recentf-open-files)
    (setq make-backup-files nil) ;stop creating backup files
  #+END_SRC 

* Ui  
  #+BEGIN_SRC emacs-lisp
					    ;Install doom themes
    (straight-use-package 'doom-themes)
					    ;(load-theme 'doom-gruvbox t)
    (load-theme 'doom-monokai-classic t)
					    ;Install doom modeline
    (straight-use-package 'doom-modeline)
    (doom-modeline-mode 1)
					    ;Install icons packages
    (setq doom-modeline-major-mode-icon t)
					    ;Remove emacs bars
    (menu-bar-mode '-1)
    (toggle-scroll-bar -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (fringe-mode -1)
    (setq tab-bar-mode -1)
					    ;Set line numbers as relative
    (setq display-line-numbers-type 'relative)
					    ;Set font
					    ;Enable icons fore dired
    (straight-use-package 'all-the-icons-dired)
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
					    ;(set-frame-font "-CYRE-Inconsolata Nerd Font-normal-normal-normal-*-*-*-*-*-*-0-iso10646-1V")
  #+END_SRC

* Packages
** Dap/Lsp mode
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'lsp-mode)
					     ;Lsp ui tweaks
     (setq lsp-headerline-breadcrumb-enable nil)
     (straight-use-package 'dap-mode)
     (add-hook 'prog-mode-hook 'lsp)
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
     (setq dap-auto-configure-features '(sessions locals controls tooltip))

					     ;Add dap chrome
     (require 'dap-chrome)
     (require 'dap-node)
     (require 'dap-python)
   #+END_SRC
*** Haskell setup/Nix Haskell
    #+BEGIN_SRC emacs-lisp
      (straight-use-package 'nix-mode)
      (straight-use-package 'haskell-mode)
      (straight-use-package 'lsp-haskell)
      (add-hook 'haskell-mode-hook #'lsp)
      (add-hook 'haskell-literate-mode-hook #'lsp)
      (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
      (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
      (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
					      ;(add-to-list 'completion-ignored-extensions ".hi")
    #+END_SRC   
*** Anisible/Yml setup
    #+BEGIN_SRC emacs-lisp
      (straight-use-package 'ansible)
      (straight-use-package 'yaml-mode)
      (add-hook 'yaml-mode-hook '(lambda () (ansible 1)))
    #+END_SRC
*** Php Setup
    #+begin_src emacs-lisp
      (straight-use-package 'php-mode)
    #+end_src
** Company mode 
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'company-mode)
   #+END_SRC
** Evil mode
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'evil)
     (straight-use-package 'evil-org-mode)
     (evil-mode 1)
     (evil-org-mode 1)
     (setq evil-want-C-u-scroll t)
     (setq evil-want-fine-undo t)
   #+END_SRC
** Org Mode 
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'evil-org-mode 1)
     (add-hook 'org-mode-hook 'display-line-numbers-mode 1)
     (global-set-key [f9] 'org-capture)
   #+END_SRC
*** Org Bullet
    #+begin_src emacs-lisp
      (straight-use-package 'org-bullets)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (setq org-bullets-bullet-list '("✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥"))
    #+end_src
*** Org Babel keybindings
    #+begin_src emasc-lisp
    (global-set-key (kbd "C-c C-\") 'yas-new-snippet)

    #+end_src
** vertico mode
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'vertico)
     (vertico-mode 1)
   #+END_SRC
** Treemacs
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'treemacs)                 ;install treemacs
     (straight-use-package 'treemacs-evil)            ;treemacs evil mode
     (straight-use-package 'treemacs-magit)           ;treemacs magit support
     (straight-use-package 'treemacs-all-the-icons)   ;treemacs icons and UI

     (setq treemacs-width '25)
     (setq treemacs-user-mode-line-format 'none)

     (global-set-key [f8] 'treemacs)
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'magit)
   #+END_SRC
** Helpful mode
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'helpful)
     (global-set-key (kbd "C-h f") #'helpful-callable)
     (global-set-key (kbd "C-h v") #'helpful-variable)
     (global-set-key (kbd "C-h k") #'helpful-key)
   #+END_SRC
** Which key mode
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'which-key)
     (which-key-mode 1)
   #+END_SRC
** Solaire-mode
   #+begin_src emacs-lisp
     (straight-use-package 'solaire-mode)
     (solaire-global-mode +1)
   #+end_src
** Write room mode
   #+begin_src emacs-lisp
     (straight-use-package 'writeroom-mode)
   #+end_src
** Rainbow Delimiters 
   #+begin_src emacs-lisp
     (straight-use-package 'rainbow-delimiters)
     (setq rainbow-delimeters-mode 't)
   #+end_src
** Rainbow mode
   #+begin_src emacs-lisp
     (straight-use-package 'rainbow-mode)
   #+end_src
** Pdf-tools
   #+begin_src emacs-lisp
     (straight-use-package 'pdf-tools)
     (pdf-tools-install)
   #+end_src
** Yas Snippets
   #+begin_src emacs-lisp
     (straight-use-package 'yasnippets)
     (straight-use-package 'yasnippet-snippets)
     (add-hook 'prog-mode-hook #'yas-minor-mode)
     (setq yas-snippet-dirs
	   '("~/.emacs.d/snippets"                 ;; personal snippets
	     "/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
	     "/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
	     ))
     (yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.
     ;;keybindings
     (global-set-key (kbd "C-c C-n") 'yas-new-snippet)
     (global-set-key (kbd "C-c C-i") 'yas-insert-snippet)

   #+end_src
** Dired mode
   #+begin_src emacs-lisp
     (use-package dired
       :ensure nil
       :commands (dired dired-jump)
       :bind(("C-x C-j" . dired-jump))
       )
     (add-hook 'diredmode-hook evil-mode -1)
   #+end_src
** Emmet mode
   #+begin_src emacs-lisp
     (straight-use-package 'emmet-mode)
   #+end_src
** Recent Mode
   #+begin_src emacs-lisp
     (straight-use-package 'recentf)
   #+end_src
** Helm mod
   #+begin_src emacs-lisp
     (straight-use-package 'helm)
   #+end_src
** Pdf-viewr-restore
   #+begin_src emacs-lisp
   (straight-use-package 'pdf-view-restore)
   (add-hook 'pdf-view-mode-hook 'pdf-view-restore)
   #+end_src
* Melpa
  #+begin_src emacs-lisp
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org"."https://orgmode.org/elpa/")
			     ("elpa"."https://melpa.org/packages/")))
  #+end_src
